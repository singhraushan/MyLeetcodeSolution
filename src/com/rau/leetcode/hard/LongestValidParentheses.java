package com.rau.leetcode.hard;

import java.util.Stack;

public class LongestValidParentheses {
    public static void main(String[] args) {
        System.out.println("res: "+longestValidParentheses(""));//0
        System.out.println("res: "+longestValidParentheses("(()"));//2
        System.out.println("res: "+longestValidParentheses(")()())"));//4
        System.out.println("res: "+longestValidParentheses("(())("));//4
        //System.out.println("res: "+longestValidParentheses("))()())())))()))(()(()))))(()()())))((()()((()))))))()((((())))((((((()())(((()))(())()))((())(()((((((())(()))()())()())))(((((()())()())((((()(((())((()(())(((()))()()())()(())((((((()()())()()((())(((())()())()(())()))()))())(())())((()()(((((()))(()))())(()))(((()())))((((()))((())))())((((((())))(()(()(())()()()()())())(()()())((())()(())((())))(()())(())(((((()()(())()((()))))()())()(())(()((((()(((((()))(()(())(((())))())))(()())))(()))()))(()(()))(((()(())(())()()()))()(((())(((()())(((())())(()))))()()))())()((()()()()))())((()))()()(()()(())(((()()()()(()()())()((()()()())())))()((((()()(((())()()((())))(())(()))))(()(()()()))())(())())))))((((()())((()))(()())((((()))())))))()(()(()))))()))())()(((()()()())()()))(()((())((()(()(((((((()))()())()(()()()((((()())))))))(())()()(()())(())())))((())))())()())))(()))()()))(())()()))(()())))(()((((()()(()()((()))()()))(((()))))))()(())(((())(())())())(((()))((()(()())()()))()))()))()((())(())(((()(((()()())))(((()(()(()())()))()))())))((()))))(((((()()(()())))()())))))((((()(()(((())(()((()(()()()()()(())()(()((()()(()))))()(()(())()()))))()))))()()()()(()()((()()()()()((())))()())(()(())(())(()(()())()()))(()))))(()())())()((()))())()())((((()(()()((())(()()()(((()((()(()())(((()((()(()(()(()((()((()())(((((())((()())())((())))))(((((((()(((((()(()))())((()(((((((()(((((()((()()()())(()(()(())))()(("));
    }

    static  public int longestValidParentheses(String s) {
        int max =0,len = s.length();

        for(int i=0;i<len;i++) {

            if (max < (len - i)) {
                Stack<Character> stack = new Stack<>();
                int tempMax = 0;
                for (int j = i; j < len; j++) {
                    char ch = s.charAt(j);
                    if (s.charAt(j) == '(') {
                        stack.add(ch);
                    } else {
                        if (stack.isEmpty())
                            break;
                        stack.pop();
                        tempMax += 2;
                        if (stack.isEmpty()) {
                            max = Math.max(max, tempMax);
                        }
                    }

                }
                if (stack.size()==len) {
                    return 0;
                }
            }
        }
        return max;
    }

}
